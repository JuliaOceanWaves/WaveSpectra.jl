var documenterSearchIndex = {"docs":
[{"location":"#WaveSpectra.jl-Documentation","page":"WaveSpectra.jl Documentation","title":"WaveSpectra.jl Documentation","text":"","category":"section"},{"location":"","page":"WaveSpectra.jl Documentation","title":"WaveSpectra.jl Documentation","text":"","category":"page"},{"location":"#Functions","page":"WaveSpectra.jl Documentation","title":"Functions","text":"","category":"section"},{"location":"","page":"WaveSpectra.jl Documentation","title":"WaveSpectra.jl Documentation","text":"DiscreteOmnidirectionalSpectrum\nUnitful.unit(::DiscreteOmnidirectionalSpectrum)\nUnitful.dimension(::DiscreteOmnidirectionalSpectrum)\nfrequency_unit\nfrequency_dimension\nquantity\nspectral_moment\nenergy_period\nsignificant_waveheight\nconvert_frequency","category":"page"},{"location":"#WaveSpectra.DiscreteOmnidirectionalSpectrum","page":"WaveSpectra.jl Documentation","title":"WaveSpectra.DiscreteOmnidirectionalSpectrum","text":"DiscreteOmnidirectionalSpectrum(value::AbstractVecOrMat{<:Quantity}, frequency::AbstractVector{<:Quantity}; density::Bool=true)\nDiscreteOmnidirectionalSpectrum(func::Function, frequency::AbstractVector{<:Quantity}; density::Bool=true)\n\nCreate discrete omnidirectional spectrum Struct using two Unitful vectors, matrix and vector, or function and vector.\n\nExample\n\njulia> using WaveSpectra, Unitful\n\njulia> v1=f=range(1u\"Hz\", 3u\"Hz\", 3)\n(1.0:1.0:3.0) Hz\n\njulia> s1 = DiscreteOmnidirectionalSpectrum(v1,f)\nPARAMS: {Quantity{Float64, 𝐓⁻¹, Unitful.FreeUnits{(Hz,), 𝐓⁻¹, nothing}},\n         Quantity{Float64, 𝐓⁻¹, Unitful.FreeUnits{(Hz,), 𝐓⁻¹, nothing}},\n         Density=true, Value Dims=1}\nFREQUENCY       {Hz}:   1.0:1.0:3.0\nVALUES (3,)     {Hz}:   1.0:1.0:3.0\n\njulia> v2 = ones(typeof(1u\"Hz\"), 3, 3)\n3×3 Matrix{Quantity{Int64, 𝐓 ⁻¹, Unitful.FreeUnits{(Hz,), 𝐓 ⁻¹, nothing}}}:\n 1 Hz  1 Hz  1 Hz\n 1 Hz  1 Hz  1 Hz\n 1 Hz  1 Hz  1 Hz\n\njulia> s2 = DiscreteOmnidirectionalSpectrum(v2, f)\nPARAMS: {Quantity{Int64, 𝐓⁻¹, Unitful.FreeUnits{(Hz,), 𝐓⁻¹, nothing}},\n         Quantity{Float64, 𝐓⁻¹, Unitful.FreeUnits{(Hz,), 𝐓⁻¹, nothing}},\n         Density=true, Value Dims=2}\nFREQUENCY       {Hz}:   1.0:1.0:3.0\nVALUES (3, 3)   {Hz}:   1.0 … 1.0\n                        ⋮   ⋱   ⋮\n                        1.0 … 1.0\n\njulia> func(x) = x\nfunc (generic function with 1 method)\n\njulia> s3 = DiscreteOmnidirectionalSpectrum(func, f)\nPARAMS: {Quantity{Float64, 𝐓⁻¹, Unitful.FreeUnits{(Hz,), 𝐓⁻¹, nothing}},\n         Quantity{Float64, 𝐓⁻¹, Unitful.FreeUnits{(Hz,), 𝐓⁻¹, nothing}},\n         Density=true, Value Dims=1}\nFREQUENCY       {Hz}:   1.0:1.0:3.0\nVALUES (3,)     {Hz}:   [1.0, 2.0, 3.0]\n\n\n\n\n\n","category":"type"},{"location":"#Unitful.unit-Tuple{DiscreteOmnidirectionalSpectrum}","page":"WaveSpectra.jl Documentation","title":"Unitful.unit","text":"unit(x::Quantity{T,D,U}) where {T,D,U}\nunit(x::Type{Quantity{T,D,U}}) where {T,D,U}\n\nReturns the units associated with a Quantity or Quantity type.\n\nExamples:\n\njulia> unit(1.0u\"m\") == u\"m\"\ntrue\n\njulia> unit(typeof(1.0u\"m\")) == u\"m\"\ntrue\n\n\n\n\n\nUnitful.unit(::DiscreteOmnidirectionalSpectrum)\n\nExtends from Unitful, returns the units of the spectra vector/matrix in the struct\n\nExample\n\njulia> using WaveSpectra, Unitful\n\njulia> v=range(1u\"m/Hz\", 3u\"m/Hz\", 3)\n(1.0:1.0:3.0) m Hz⁻¹\n\njulia> f=range(1u\"Hz\", 3u\"Hz\", 3)\n(1.0:1.0:3.0) Hz\n\njulia> s = DiscreteOmnidirectionalSpectrum(v,f);\n\njulia> unit(s)\nm Hz⁻¹\n\n\n\n\n\n\n","category":"method"},{"location":"#Unitful.dimension-Tuple{DiscreteOmnidirectionalSpectrum}","page":"WaveSpectra.jl Documentation","title":"Unitful.dimension","text":"dimension(x::Unit)\n\nReturns a Unitful.Dimensions object describing the given unit x.\n\n\n\n\n\ndimension(u::Units{U,D}) where {U,D}\n\nReturns a Unitful.Dimensions object corresponding to the dimensions of the units, D. For a dimensionless combination of units, a Unitful.Dimensions{()} object is returned (NoDims).\n\nExamples:\n\njulia> dimension(u\"m\")\n𝐋\n\njulia> typeof(dimension(u\"m\"))\nUnitful.Dimensions{(Unitful.Dimension{:Length}(1//1),)}\n\njulia> dimension(u\"m/km\")\nNoDims\n\n\n\n\n\ndimension(x::Quantity{T,D}) where {T,D}\ndimension(::Type{Quantity{T,D,U}}) where {T,D,U}\n\nReturns a Unitful.Dimensions object D corresponding to the dimensions of quantity x. For a dimensionless Unitful.Quantity, a Unitful.Dimensions{()} object is returned (NoDims).\n\nExamples:\n\njulia> dimension(1.0u\"m\")\n𝐋\n\njulia> typeof(dimension(1.0u\"m/μm\"))\nUnitful.Dimensions{()}\n\n\n\n\n\nUnitful.dimension(::DiscreteOmnidirectionalSpectrum)\n\nExtends from Unitful, returns the dimension of the spectra vector/matrix in the struct\n\nExample\n\njulia> using WaveSpectra, Unitful\n\njulia> v=range(1u\"m/Hz\", 3u\"m/Hz\", 3)\n(1.0:1.0:3.0) m Hz⁻¹\n\njulia> f=range(1u\"Hz\", 3u\"Hz\", 3)\n(1.0:1.0:3.0) Hz\n\njulia> s = DiscreteOmnidirectionalSpectrum(v,f);\n\njulia> dimension(s)\n𝐋  𝐓\n\n\n\n\n\n\n","category":"method"},{"location":"#WaveSpectra.frequency_unit","page":"WaveSpectra.jl Documentation","title":"WaveSpectra.frequency_unit","text":"frequency_unit(::DiscreteOmnidirectionalSpectrum)\n\nReturn the units of the frequency vector in the struct\n\nExample\n\njulia> using WaveSpectra, Unitful\n\njulia> v=range(1u\"m/Hz\", 3u\"m/Hz\", 3)\n(1.0:1.0:3.0) m Hz⁻¹\n\njulia> f=range(1u\"Hz\", 3u\"Hz\", 3)\n(1.0:1.0:3.0) Hz\n\njulia> s = DiscreteOmnidirectionalSpectrum(v,f);\n\njulia> frequency_unit(s)\nHz\n\n\n\n\n\n\n","category":"function"},{"location":"#WaveSpectra.frequency_dimension","page":"WaveSpectra.jl Documentation","title":"WaveSpectra.frequency_dimension","text":"frequency_dimension(::DiscreteOmnidirectionalSpectrum)\n\nReturn the dimension of the frequency vector in the struct\n\nExample\n\njulia> using WaveSpectra, Unitful\n\njulia> v=range(1u\"m/Hz\", 3u\"m/Hz\", 3)\n(1.0:1.0:3.0) m Hz⁻¹\n\njulia> f=range(1u\"Hz\", 3u\"Hz\", 3)\n(1.0:1.0:3.0) Hz\n\njulia> s = DiscreteOmnidirectionalSpectrum(v,f);\n\njulia> frequency_dimension(s)\n𝐓 ⁻¹\n\n\n\n\n\n\n","category":"function"},{"location":"#WaveSpectra.quantity","page":"WaveSpectra.jl Documentation","title":"WaveSpectra.quantity","text":"quantity(::DiscreteOmnidirectionalSpectrum)\n\nReturn the dimensions and units of the product between spectra and frequency.\n\nExample\n\njulia> using WaveSpectra, Unitful\n\njulia> v=range(1u\"m/Hz\", 3u\"m/Hz\", 3)\n(1.0:1.0:3.0) m Hz⁻¹\n\njulia> f=range(1u\"Hz\", 3u\"Hz\", 3)\n(1.0:1.0:3.0) Hz\n\njulia> s = DiscreteOmnidirectionalSpectrum(v,f);\n\njulia> quantity(s)\n(𝐋 , m)\n\n\n\n\n\n\n","category":"function"},{"location":"#WaveSpectra.spectral_moment","page":"WaveSpectra.jl Documentation","title":"WaveSpectra.spectral_moment","text":"spectral_moment(spectrum::DiscreteOmnidirectionalSpectrum, n::Real=0; alg::AbstractIntegralAlgorithm=TrapezoidalRule())\n\nCalculate the n-th spectral moment of a discrete spectra struct.\n\nExample\n\njulia> using WaveSpectra, Unitful\n\njulia> v=f=range(1u\"Hz\", 5u\"Hz\", 5)\n(1.0:1.0:5.0) Hz\n\njulia> s = DiscreteOmnidirectionalSpectrum(v,f);\n\njulia> spectral_moment(s, -1)\n4.0 s⁻¹\n\njulia> spectral_moment(s, 0)\n12.0 s⁻²\n\njulia> spectral_moment(s, 1)\n42.0 s⁻³\n\n\n\n\n\n","category":"function"},{"location":"#WaveSpectra.energy_period","page":"WaveSpectra.jl Documentation","title":"WaveSpectra.energy_period","text":"energy_period(spectrum::DiscreteOmnidirectionalSpectrum; alg::AbstractIntegralAlgorithm=TrapezoidalRule())\n\nCalculate the energy period of a discrete spectra struct.\n\nExample\n\njulia> using WaveSpectra, Unitful\n\njulia> v=f=range(1u\"Hz\", 5u\"Hz\", 5)\n(1.0:1.0:5.0) Hz\n\njulia> s = DiscreteOmnidirectionalSpectrum(v,f);\n\njulia> energy_period(s)\n0.3333333333333333 s\n\n\n\n\n\n\n","category":"function"},{"location":"#WaveSpectra.significant_waveheight","page":"WaveSpectra.jl Documentation","title":"WaveSpectra.significant_waveheight","text":"significant_waveheight(spectrum::DiscreteOmnidirectionalSpectrum; alg::AbstractIntegralAlgorithm=TrapezoidalRule())\n\nCalculate the significant waveheight of a discrete spectra struct.\n\nExample\n\njulia> using WaveSpectra, Unitful\n\njulia> v=f=range(1u\"Hz\", 5u\"Hz\", 5)\n(1.0:1.0:5.0) Hz\n\njulia> s = DiscreteOmnidirectionalSpectrum(v,f);\n\njulia> significant_waveheight(s)\n13.856406460551018 s⁻¹\n\n\n\n\n\n\n","category":"function"},{"location":"#WaveSpectra.convert_frequency","page":"WaveSpectra.jl Documentation","title":"WaveSpectra.convert_frequency","text":"convert_frequency(spectrum::DiscreteOmnidirectionalSpectrum{TS, TF}, TF_new, dispersion::Dispersion=Dispersion()) where {TS, TF}\n\nConverts the spectra into the new frequency units using the DimensionfulAngles.Dispersion relation  and returns a new struct with updated spectrum and frequency.\n\nSee also DimensionfulAngles.Dispersion\n\nExample\n\njulia> using WaveSpectra, Unitful\n\njulia> v=f=range(1u\"Hz\", 5u\"Hz\", 5)\n(1.0:1.0:5.0) Hz\n\njulia> s1 = DiscreteOmnidirectionalSpectrum(v,f)\nPARAMS: {Quantity{Float64, 𝐓⁻¹, Unitful.FreeUnits{(Hz,), 𝐓⁻¹, nothing}},\n         Quantity{Float64, 𝐓⁻¹, Unitful.FreeUnits{(Hz,), 𝐓⁻¹, nothing}},\n         Density=true, Value Dims=1}\nFREQUENCY       {Hz}:   1.0:1.0:5.0\nVALUES (5,)     {Hz}:   1.0:1.0:5.0\n\njulia> s2 = convert_frequency(s1, typeof(1u\"Hz^-1\"))\nPARAMS: {Quantity{Float64, 𝐓⁻³, Unitful.FreeUnits{(s⁻³,), 𝐓⁻³, nothing}},\n         Quantity{Float64, 𝐓, Unitful.FreeUnits{(Hz⁻¹,), 𝐓, nothing}},\n         Density=true, Value Dims=1}\nFREQUENCY       {Hz⁻¹}:         [1.0, 0.5, 0.3333333333333333, 0.25, 0.2]\nVALUES (5,)     {s⁻³}:  [1.0, 8.0, 27.0, 64.0, 125.0]\n\n\n\n\n\n","category":"function"},{"location":"#Index","page":"WaveSpectra.jl Documentation","title":"Index","text":"","category":"section"},{"location":"","page":"WaveSpectra.jl Documentation","title":"WaveSpectra.jl Documentation","text":"","category":"page"}]
}
