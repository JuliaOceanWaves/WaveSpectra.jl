var documenterSearchIndex = {"docs":
[{"location":"#WaveSpectra.jl-Documentation","page":"WaveSpectra.jl Documentation","title":"WaveSpectra.jl Documentation","text":"","category":"section"},{"location":"","page":"WaveSpectra.jl Documentation","title":"WaveSpectra.jl Documentation","text":"","category":"page"},{"location":"#Functions","page":"WaveSpectra.jl Documentation","title":"Functions","text":"","category":"section"},{"location":"","page":"WaveSpectra.jl Documentation","title":"WaveSpectra.jl Documentation","text":"DiscreteOmnidirectionalSpectrum\nOmnidirectionalSpectrum\nfrequency_unit\nfrequency_dimension\nquantity\nspectral_moment\nenergy_period\nsignificant_waveheight\nconvert_frequency","category":"page"},{"location":"#WaveSpectra.DiscreteOmnidirectionalSpectrum","page":"WaveSpectra.jl Documentation","title":"WaveSpectra.DiscreteOmnidirectionalSpectrum","text":"DiscreteOmnidirectionalSpectrum(value::AbstractVecOrMat{<:Quantity}, frequency::AbstractVector{<:Quantity}; density::Bool=true)\n\nCreate discrete omnidirectional spectrum using two Unitful vectors, or matrix and vector.\n\nExample\n\njulia> using WaveSpectra, Unitful\n\njulia> v1=f=range(1u\"Hz\", 3u\"Hz\", 3)\n(1.0:1.0:3.0) Hz\n\njulia> s1 = DiscreteOmnidirectionalSpectrum(v1,f);\n\njulia> v2 = ones(typeof(1u\"Hz\"), 3, 3)\n3√ó3 Matrix{Quantity{Int64, ùêì‚Åª¬π, Unitful.FreeUnits{(Hz,), ùêì‚Åª¬π, nothing}}}:\n 1 Hz  1 Hz  1 Hz\n 1 Hz  1 Hz  1 Hz\n 1 Hz  1 Hz  1 Hz\n\njulia> s2 = DiscreteOmnidirectionalSpectrum(v2, f);\n\n\n\n\n\n\n","category":"type"},{"location":"#WaveSpectra.OmnidirectionalSpectrum","page":"WaveSpectra.jl Documentation","title":"WaveSpectra.OmnidirectionalSpectrum","text":"OmnidirectionalSpectrum(func::Function, TS::DataType, TF::DataType)\n\nCreate an omnidirectional spectrum using a a function with the appropriate data types.\n\nExample\n\njulia> using WaveSpectra, Unitful\n\njulia> s1 = OmnidirectionalSpectrum(x -> x, typeof(1.0u\"Hz\"), typeof(1.0u\"Hz\"));\n\n\n\n\n\n","category":"type"},{"location":"#WaveSpectra.frequency_unit","page":"WaveSpectra.jl Documentation","title":"WaveSpectra.frequency_unit","text":"frequency_unit(::DiscreteOmnidirectionalSpectrum)\n\nReturn the units of the frequency vector.\n\nExample\n\njulia> using WaveSpectra, Unitful\n\njulia> v=range(1u\"m/Hz\", 3u\"m/Hz\", 3)\n(1.0:1.0:3.0) m Hz‚Åª¬π\n\njulia> f=range(1u\"Hz\", 3u\"Hz\", 3)\n(1.0:1.0:3.0) Hz\n\njulia> s = DiscreteOmnidirectionalSpectrum(v,f);\n\njulia> frequency_unit(s)\nHz\n\n\n\n\n\n\nfrequency_unit(::OmnidirectionalSpectrum{TS, TF})\n\nReturn the units of the expected frequency vector.\n\nExample\n\njulia> using WaveSpectra, Unitful\n\njulia> s = OmnidirectionalSpectrum(x -> x, typeof(1.0u\"Hz\"));\n\njulia> unit(s)\nHz\n\n\n\n\n\n\n","category":"function"},{"location":"#WaveSpectra.frequency_dimension","page":"WaveSpectra.jl Documentation","title":"WaveSpectra.frequency_dimension","text":"frequency_dimension(::DiscreteOmnidirectionalSpectrum)\n\nReturn the dimension of the frequency vector.\n\nExample\n\njulia> using WaveSpectra, Unitful\n\njulia> v=range(1u\"m/Hz\", 3u\"m/Hz\", 3)\n(1.0:1.0:3.0) m Hz‚Åª¬π\n\njulia> f=range(1u\"Hz\", 3u\"Hz\", 3)\n(1.0:1.0:3.0) Hz\n\njulia> s = DiscreteOmnidirectionalSpectrum(v,f);\n\njulia> frequency_dimension(s)\nùêì‚Åª¬π\n\n\n\n\n\n\nfrequency_dimension(::OmnidirectionalSpectrum{TS, TF})\n\nReturn the dimension of the expected frequency vector.\n\nExample\n\njulia> using WaveSpectra, Unitful\n\njulia> s = OmnidirectionalSpectrum(x -> x, typeof(1.0u\"Hz\"));\n\njulia> dimension(s)\nùêì‚Åª¬π\n\n\n\n\n\n\n","category":"function"},{"location":"#WaveSpectra.quantity","page":"WaveSpectra.jl Documentation","title":"WaveSpectra.quantity","text":"quantity(::DiscreteOmnidirectionalSpectrum{TS, TF, D})\n\nReturn the dimensions and units of the product between spectra and frequency.\n\nExample\n\njulia> using WaveSpectra, Unitful\n\njulia> v=range(1u\"m/Hz\", 3u\"m/Hz\", 3)\n(1.0:1.0:3.0) m Hz‚Åª¬π\n\njulia> f=range(1u\"Hz\", 3u\"Hz\", 3)\n(1.0:1.0:3.0) Hz\n\njulia> s = DiscreteOmnidirectionalSpectrum(v,f);\n\njulia> quantity(s)\n(ùêã, m)\n\n\n\n\n\n\nquantity(::OmnidirectionalSpectrum{TS, TF})\n\nReturn the dimensions and units of the product between spectra and frequency.\n\nExample\n\njulia> using WaveSpectra, Unitful\n\njulia> s = OmnidirectionalSpectrum(x -> x, typeof(1.0u\"Hz\"));\n\njulia> quantity(s)\n(ùêì‚Åª¬≤, Hz¬≤)\n\n\n\n\n\n\n","category":"function"},{"location":"#WaveSpectra.spectral_moment","page":"WaveSpectra.jl Documentation","title":"WaveSpectra.spectral_moment","text":"spectral_moment(spectrum::DiscreteOmnidirectionalSpectrum, n::Real=0; alg::AbstractIntegralAlgorithm=TrapezoidalRule())\n\nCalculate the n-th spectral moment of a discrete spectra.\n\nExample\n\njulia> using WaveSpectra, Unitful\n\njulia> v=f=range(1u\"Hz\", 5u\"Hz\", 5)\n(1.0:1.0:5.0) Hz\n\njulia> s = DiscreteOmnidirectionalSpectrum(v,f);\n\njulia> spectral_moment(s, -1)\n4.0 s‚Åª¬π\n\njulia> spectral_moment(s, 0)\n12.0 s‚Åª¬≤\n\njulia> spectral_moment(s, 1)\n42.0 s‚Åª¬≥\n\n\n\n\n\nspectral_moment(spectrum::OmnidirectionalSpectrum{TS, TF}, n::Int,\nf_begin::Union{Quantity, Nothing}=nothing, f_end::Union{Quantity, Nothing}=nothing;\nalg::AbstractIntegralAlgorithm=QuadGKJL(), kwargs...)\n\nCalculate the n-th spectral moment of a spectra, use range if given.\n\nExample\n\njulia> using WaveSpectra, Unitful\n\njulia> s = OmnidirectionalSpectrum(x -> x, typeof(1.0u\"Hz\"));\n\njulia> spectral_moment(s, -1, 1u\"Hz\", 5u\"Hz\")\n4.0 s‚Åª¬π\n\njulia> spectral_moment(s, 0, 1u\"Hz\", 5u\"Hz\")\n12.0 s‚Åª¬≤\n\njulia> spectral_moment(s, 1, 1u\"Hz\", 5u\"Hz\")\n41.333333333333336 s‚Åª¬≥\n\n\n\n\n\n","category":"function"},{"location":"#WaveSpectra.energy_period","page":"WaveSpectra.jl Documentation","title":"WaveSpectra.energy_period","text":"energy_period(\n    spectrum::OmnidirectionalSpectrum{TS,TF},\n    f_begin::Union{Quantity,Nothing}=nothing, f_end::Union{Quantity,Nothing}=nothing;\n    alg::AbstractIntegralAlgorithm=QuadGKJL(), kwargs...\n) where {TS,TF<:Frequency}\n\nCalculate the energy period of an omnidirectional spectra between a range if given.\n\nExample\n\njulia> using WaveSpectra, Unitful\n\njulia> func(x) = x\nfunc (generic function with 1 method)\n\njulia> s = OmnidirectionalSpectrum(func, typeof(1.0u\"Hz\"));\n\njulia> energy_period(s, 1u\"Hz\", 5u\"Hz\")\n0.3333333333333333 s\n\n\n\n\n\n\nenergy_period(spectrum::OmnidirectionalSpectrum{TS,TF},\n    dispersion::Dispersion=Dispersion(), f_begin::Union{Quantity,Nothing}=nothing,\n    f_end::Union{Quantity,Nothing}=nothing; alg::AbstractIntegralAlgorithm=QuadGKJL(),\n    kwargs...\n) where {TS,TF}\n\nCalculate the energy period of an omnidirectional spectra in Hz.\n\nExample\n\njulia> using WaveSpectra, DimensionfulAngles\n\njulia> using Unitful:@u_str\n\njulia> func(x) = x\nfunc (generic function with 1 method)\n\njulia> s = OmnidirectionalSpectrum(func, typeof(1.0u\"Hz^-1\"));\n\njulia> energy_period(s, Dispersion(), 1u\"Hz\", 5u\"Hz\")\n0.688888888888889 s\n\n\n\n\n\n\nenergy_period(spectrum::DiscreteOmnidirectionalSpectrum; alg::AbstractIntegralAlgorithm=TrapezoidalRule())\n\nCalculate the energy period of a discrete spectra.\n\nExample\n\njulia> using WaveSpectra, Unitful\n\njulia> v=f=range(1u\"Hz\", 5u\"Hz\", 5)\n(1.0:1.0:5.0) Hz\n\njulia> s = DiscreteOmnidirectionalSpectrum(v,f);\n\njulia> energy_period(s)\n0.3333333333333333 s\n\n\n\n\n\n\n","category":"function"},{"location":"#WaveSpectra.significant_waveheight","page":"WaveSpectra.jl Documentation","title":"WaveSpectra.significant_waveheight","text":"significant_waveheight(spectrum::OmnidirectionalSpectrum{TS,TF},\n    f_begin::Union{Quantity,Nothing}=nothing, f_end::Union{Quantity,Nothing}=nothing;\n    alg::AbstractIntegralAlgorithm=QuadGKJL(), kwargs...\n) where {TS,TF}\n\nCalculate the significant waveheight of an omnidirectional spectra.\n\nExample\n\njulia> using WaveSpectra, Unitful\n\njulia> v=f=range(1,5,5)\n1.0:1.0:5.0\n\njulia> v = v.*u\"m^2/Hz\"\n(1.0:1.0:5.0) m¬≤ Hz‚Åª¬π\n\njulia> f = f.*u\"Hz\"\n(1.0:1.0:5.0) Hz\n\njulia> s = OmnidirectionalSpectrum(v,f);\n\njulia> significant_waveheight(s)\n13.856406451197893 m\n\n\n\n\n\n\nsignificant_waveheight(spectrum::DiscreteOmnidirectionalSpectrum; alg::AbstractIntegralAlgorithm=TrapezoidalRule())\n\nCalculate the significant waveheight of a discrete spectra.\n\nExample\n\njulia> using WaveSpectra, Unitful\n\njulia> v=f=range(1u\"Hz\", 5u\"Hz\", 5)\n(1.0:1.0:5.0) Hz\n\njulia> s = DiscreteOmnidirectionalSpectrum(v,f);\n\njulia> significant_waveheight(s)\n13.856406460551018 s‚Åª¬π\n\n\n\n\n\n\n","category":"function"},{"location":"#WaveSpectra.convert_frequency","page":"WaveSpectra.jl Documentation","title":"WaveSpectra.convert_frequency","text":"convert_frequency(spectrum::DiscreteOmnidirectionalSpectrum{TS, TF}, TF_new, dispersion::Dispersion=deepwater_gradient)\n\nConverts the spectra into the new frequency units using the DimensionfulAngles.Dispersion relation  and returns a new struct with updated spectrum and frequency.\n\nSee also DimensionfulAngles.Dispersion\n\nExample\n\njulia> using WaveSpectra, Unitful\n\njulia> v=f=range(1.0u\"Hz\", 5.0u\"Hz\", 5)\n(1.0:1.0:5.0) Hz\n\njulia> s1 = DiscreteOmnidirectionalSpectrum(v,f);\n\njulia> s2 = convert_frequency(s1, 1.0u\"Hz^-1\");\n\n\n\n\n\n\nconvert_frequency(spectrum::OmnidirectionalSpectrum{TS,TF}, TF_new, dispersion::Dispersion=deepwater_gradient)\n\nConverts the spectra into the new frequency units using the DimensionfulAngles.Dispersion relation and returns a new struct with an updated function.\n\nSee also DimensionfulAngles.Dispersion\n\nExample\n\njulia> using WaveSpectra, Unitful\n\njulia> s1 = OmnidirectionalSpectrum(x -> x, typeof(1.0u\"Hz\"));\n\njulia> s2 = convert_frequency(s1, 1.0u\"Hz^-1\");\n\n\n\n\n\n\n","category":"function"},{"location":"#Index","page":"WaveSpectra.jl Documentation","title":"Index","text":"","category":"section"},{"location":"","page":"WaveSpectra.jl Documentation","title":"WaveSpectra.jl Documentation","text":"","category":"page"}]
}
